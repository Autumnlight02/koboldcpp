import KoboldCpp from './Koboldcpp';
import createClient from 'openapi-fetch';
import type { paths } from './generated/koboldCppDefinition'; // generated by openapi-typescript
import { getKoboldEndpointUrl } from './util/url';

export const a = true;

async function test() {
	const client = new KoboldCpp({ baseUrl: getKoboldEndpointUrl().href });

	// client.getPerf().then((e) => console.log(e));
	const s = client.generateStream({
		body: {
			use_default_badwordsids: true,
			bypass_eos: false,
			prompt: `
            copy exactly what I write
Linebreak





Line break, make many linebreaks
            `,
			dynatemp_exponent: 1,
			dynatemp_range: 1,
			grammar_retain_state: false,
			logit_bias: {},
			render_special: false,
			smoothing_factor: 1,
			trim_stop: false,
		},
	});
	// .then((response) => response.body)
	// .then(async (body) => {
	// 	if (body === null) return;
	// 	const reader = body.getReader();
	// 	console.log(reader);
	// 	while (true) {
	// 		const { done, value } = await reader.read();
	//         const string = new TextDecoder().decode(value)

	// 		console.log();
	// 		if (done) {
	// 			// Do something with last chunk of data then exit reader
	// 			return;
	// 		}
	// 		// Otherwise do something here to process current chunk
	// 	}
	// });
	// const version = await client.getSimplifiedVersion();
	// console.log(`Serving ${model} with Version ${version}`);
}
test();

const KoboldCppDirectClient = (args: Parameters<typeof createClient<paths>>) =>
	createClient<paths>(...args);

export default KoboldCpp;
export { KoboldCppDirectClient };
